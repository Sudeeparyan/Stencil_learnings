/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AppRouter {
    }
    interface AuthRoot {
    }
    interface ChildComponent {
        "isTextBoxEmpty": boolean;
        "textInput": string;
    }
    interface LoginPage {
    }
    interface MyApp {
        "myName": string;
    }
    interface NavBar {
    }
    interface ProfilePage {
        "image": string;
    }
    interface SignupPage {
    }
    interface UnknownRoute {
    }
    interface UserList {
        "users": string[];
    }
}
export interface ChildComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChildComponentElement;
}
declare global {
    interface HTMLAppRouterElement extends Components.AppRouter, HTMLStencilElement {
    }
    var HTMLAppRouterElement: {
        prototype: HTMLAppRouterElement;
        new (): HTMLAppRouterElement;
    };
    interface HTMLAuthRootElement extends Components.AuthRoot, HTMLStencilElement {
    }
    var HTMLAuthRootElement: {
        prototype: HTMLAuthRootElement;
        new (): HTMLAuthRootElement;
    };
    interface HTMLChildComponentElementEventMap {
        "clickEvents": any;
    }
    interface HTMLChildComponentElement extends Components.ChildComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChildComponentElementEventMap>(type: K, listener: (this: HTMLChildComponentElement, ev: ChildComponentCustomEvent<HTMLChildComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChildComponentElementEventMap>(type: K, listener: (this: HTMLChildComponentElement, ev: ChildComponentCustomEvent<HTMLChildComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChildComponentElement: {
        prototype: HTMLChildComponentElement;
        new (): HTMLChildComponentElement;
    };
    interface HTMLLoginPageElement extends Components.LoginPage, HTMLStencilElement {
    }
    var HTMLLoginPageElement: {
        prototype: HTMLLoginPageElement;
        new (): HTMLLoginPageElement;
    };
    interface HTMLMyAppElement extends Components.MyApp, HTMLStencilElement {
    }
    var HTMLMyAppElement: {
        prototype: HTMLMyAppElement;
        new (): HTMLMyAppElement;
    };
    interface HTMLNavBarElement extends Components.NavBar, HTMLStencilElement {
    }
    var HTMLNavBarElement: {
        prototype: HTMLNavBarElement;
        new (): HTMLNavBarElement;
    };
    interface HTMLProfilePageElement extends Components.ProfilePage, HTMLStencilElement {
    }
    var HTMLProfilePageElement: {
        prototype: HTMLProfilePageElement;
        new (): HTMLProfilePageElement;
    };
    interface HTMLSignupPageElement extends Components.SignupPage, HTMLStencilElement {
    }
    var HTMLSignupPageElement: {
        prototype: HTMLSignupPageElement;
        new (): HTMLSignupPageElement;
    };
    interface HTMLUnknownRouteElement extends Components.UnknownRoute, HTMLStencilElement {
    }
    var HTMLUnknownRouteElement: {
        prototype: HTMLUnknownRouteElement;
        new (): HTMLUnknownRouteElement;
    };
    interface HTMLUserListElement extends Components.UserList, HTMLStencilElement {
    }
    var HTMLUserListElement: {
        prototype: HTMLUserListElement;
        new (): HTMLUserListElement;
    };
    interface HTMLElementTagNameMap {
        "app-router": HTMLAppRouterElement;
        "auth-root": HTMLAuthRootElement;
        "child-component": HTMLChildComponentElement;
        "login-page": HTMLLoginPageElement;
        "my-app": HTMLMyAppElement;
        "nav-bar": HTMLNavBarElement;
        "profile-page": HTMLProfilePageElement;
        "signup-page": HTMLSignupPageElement;
        "unknown-route": HTMLUnknownRouteElement;
        "user-list": HTMLUserListElement;
    }
}
declare namespace LocalJSX {
    interface AppRouter {
    }
    interface AuthRoot {
    }
    interface ChildComponent {
        "isTextBoxEmpty"?: boolean;
        "onClickEvents"?: (event: ChildComponentCustomEvent<any>) => void;
        "textInput"?: string;
    }
    interface LoginPage {
    }
    interface MyApp {
        "myName"?: string;
    }
    interface NavBar {
    }
    interface ProfilePage {
        "image"?: string;
    }
    interface SignupPage {
    }
    interface UnknownRoute {
    }
    interface UserList {
        "users"?: string[];
    }
    interface IntrinsicElements {
        "app-router": AppRouter;
        "auth-root": AuthRoot;
        "child-component": ChildComponent;
        "login-page": LoginPage;
        "my-app": MyApp;
        "nav-bar": NavBar;
        "profile-page": ProfilePage;
        "signup-page": SignupPage;
        "unknown-route": UnknownRoute;
        "user-list": UserList;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-router": LocalJSX.AppRouter & JSXBase.HTMLAttributes<HTMLAppRouterElement>;
            "auth-root": LocalJSX.AuthRoot & JSXBase.HTMLAttributes<HTMLAuthRootElement>;
            "child-component": LocalJSX.ChildComponent & JSXBase.HTMLAttributes<HTMLChildComponentElement>;
            "login-page": LocalJSX.LoginPage & JSXBase.HTMLAttributes<HTMLLoginPageElement>;
            "my-app": LocalJSX.MyApp & JSXBase.HTMLAttributes<HTMLMyAppElement>;
            "nav-bar": LocalJSX.NavBar & JSXBase.HTMLAttributes<HTMLNavBarElement>;
            "profile-page": LocalJSX.ProfilePage & JSXBase.HTMLAttributes<HTMLProfilePageElement>;
            "signup-page": LocalJSX.SignupPage & JSXBase.HTMLAttributes<HTMLSignupPageElement>;
            "unknown-route": LocalJSX.UnknownRoute & JSXBase.HTMLAttributes<HTMLUnknownRouteElement>;
            "user-list": LocalJSX.UserList & JSXBase.HTMLAttributes<HTMLUserListElement>;
        }
    }
}
